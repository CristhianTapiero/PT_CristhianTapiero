// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Roles {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     Users[]
}

model Modalities {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Courses   Courses[]
}

model InscriptionStatus {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  UsersCourse UsersCourse[]
}

model Users {
  id              Int           @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String        @unique
  phone           String?
  verifiedEmailAt DateTime?
  roleId          Int
  password        String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Roles           Roles         @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  UsersCourse     UsersCourse[]
}

model Courses {
  id          Int           @id @default(autoincrement())
  name        String
  modalityId  Int
  duration    Int
  quota       Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Modalities  Modalities    @relation(fields: [modalityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  UsersCourse UsersCourse[]
}

model UsersCourse {
  id                  Int               @id @default(autoincrement())
  userId              Int
  courseId            Int
  inscriptionStatusId Int
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  Users               Users             @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Courses             Courses           @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  InscriptionStatus   InscriptionStatus @relation(fields: [inscriptionStatusId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
